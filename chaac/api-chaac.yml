openapi: 3.0.0
servers:
  - description: Chaac API
    url: http://localhost/api/v1
info:
  description: This is API of component Chaac
  version: "1.0.0"
  title: Chaac API
  contact:
    email: alfredo.barron@cinvestav.mx
tags:
  - name: Acquisition
    description: Contextual data acquisition
  - name: Analisys
    description: Contextual data analysis
  - name: Creation
    description: Creation of the data distribution schema
  - name: Visualization
    description: Visualization of the data distribution scheme
paths:
  /hosts:
    post:
      tags:
        - Acquisition
      summary: Add a host and microservices 
      operationId: createHost
      requestBody:
        description: 'Host object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostMicroservices'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
    get:
      tags: 
        - Visualization
      summary: Get all hosts
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
  /attributes:
    post:
      tags:
        - Acquisition
      summary: Adds new contextual data attributes
      operationId: createContextualDataAttribute
      requestBody:
        description: Host object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ContextAttribute'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
  /hosts/{id}:
    get:
      tags:
        - Visualization
      summary: Get a host
      parameters:
        - name: id
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
        '404':
          description: Not found
  /hosts/{id}/microservices:
    get:
      tags:
        - Visualization
      summary: Get all microservices from a host
      parameters:
        - name: id
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Microservice'
        '400':
          description: Bad request
  /hosts/{hostId}/microservices/{microserviceId}:
    get:
      tags:
        - Visualization
      summary: Get a microservice from a host
      parameters:
        - name: hostId
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
        - name: microserviceId
          in: path
          description: Microservice ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microservice'
        '400':
          description: Bad request
        '404':
          description: Not found
  /hosts/{hostId}/microservices/{microserviceId}/attributes:
    get:
      tags:
        - Visualization
      summary: Get all contextual data attributes one microservice from a host
      parameters:
        - name: hostId
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
        - name: microserviceId
          in: path
          description: Microservice ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContextAttribute'
        '400':
          description: Bad request
        '404':
          description: Not found
  /ranking/{k}:
    get:
      tags:
        - Analisys
      summary: Ranking of microservices
      parameters:
        - name: k
          in: path
          description: Number of zones
          required: true
          schema:
            type: integer
            format: int32
            example: 3
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '400':
          description: Bad request
  /cenotes:
    post:
      tags:
        - Creation
      summary: Add a new cenote
      operationId: createCenote
      requestBody:
        description: 'Cenote object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cenote'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
    get:
      tags: 
        - Visualization
      summary: Get all cenotes
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cenote'
        '400':
          description: Bad request
  /cenotes/{id}:
    get:
      tags:
        - Visualization
      summary: Get a cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cenote'
        '400':
          description: Bad request
    delete:
      tags:
        - Creation
      summary: Delete a cenote
      operationId: deleteCenoteById
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '404': 
          description: Not found
        '400':
          description: Bad request
  /cenotes/{id}/create:
    get:
      tags:
        - Creation
      summary: Create a virtual container as cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create cenote
        '400':
          description: Bad request
  /cenotes/{id}/start:
    get:
      tags:
        - Creation
      summary: Start a virtual container as cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Start cenote
        '400':
          description: Bad request
  /cenotes/{id}/restart:
    get:
      tags:
        - Creation
      summary: Restart a virtual container as cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restart cenote
        '400':
          description: Bad request
  /cenotes/{id}/stop:
    get:
      tags:
        - Creation
      summary: Stop a virtual container as cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stop cenote
        '400':
          description: Bad request
  /cenotes/{id}/remove:
    get:
      tags:
        - Creation
      summary: Remove a virtual container as cenote
      parameters:
        - name: id
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Remove cenote
        '400':
          description: Bad request
  /cenotes/{cenoteId}/bins:
    get:
      tags: 
        - Visualization
      summary: Get all bins into a cenote
      parameters:
        - name: cenoteId
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bin'
        '400':
          description: Bad request
  /cenotes/{cenoteId}/bins/{binId}:
    get:
      tags:
        - Visualization
      summary: Get a bin into a cenote
      parameters:
        - name: cenoteId
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
        - name: binId
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: bin1   
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'
        '400':
          description: Bad request
  /cenotes/{cenoteId}/bins/{binId}/balls:
    get:
      tags:
        - Visualization
      summary: Get all balls into bin from a cenote
      parameters:
        - name: cenoteId
          in: path
          description: Cenote ID
          required: true
          schema:
            type: string
            example: cenote1
        - name: binId
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: bin1   
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ball'
        '400':
          description: Bad request
  /bins:
    post:
      tags:
        - Creation
      summary: Add a new bin
      operationId: createBin
      requestBody:
        description: 'Bin object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bin'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
  /bins/{id}:
    delete:
      tags:
        - Creation
      summary: Delete a bin
      operationId: deleteBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '404': 
          description: Not found
        '400':
          description: Bad request
  /bins/{id}/create:
    get:
      tags:
        - Creation
      summary: Create a virtual container as bin
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create bin
        '400':
          description: Bad request
  /bins/{id}/start:
    get:
      tags:
        - Creation
      summary: Start a virtual container as bin
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Start container
        '400':
          description: Bad request
  /bins/{id}/restart:
    get:
      tags:
        - Creation
      summary: Restart a virtual container as bin
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restart bin
        '400':
          description: Bad request
  /bins/{id}/stop:
    get:
      tags:
        - Creation
      summary: Stop a virtual container as bin
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stop container
        '400':
          description: Bad request
  /bins/{id}/remove:
    get:
      tags:
        - Creation
      summary: Remove a virtual container as bin
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cd1
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Remove bin
        '400':
          description: Bad request
components:
  schemas:
    Microservice:
      type: object
      properties:
        id:
          type: string
          example: a7dc1bb4485c5d1d94bc4bcb7001c6a4179e049ed84845f9253ae2e01e0d7e6e
        name: 
          type: string
          example: chaac_client
        hostId:
          type: string
          example: host01
        location:
          type: string
          example: 127.0.0.1
        volumeProductionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.9843
        densityProductionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.4504
        volumeConsumptionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.5302
        densityConsumptionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.8723
        volumeProductionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.1304
        densityProductionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.1345
        volumeConsumptionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.5694
        densityConsumptionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.8791
      required:
      - id
      - name
      - hostId
      - location
    HostMicroservices:
      type: object
      properties:
        host:
          $ref: '#/components/schemas/Host'
        microservices:
          type: array
          items: 
            $ref: '#/components/schemas/Microservice'
      required: 
        - host
    Zone:
      type: object
      properties:
        label:
          type: string
          example: zone1
        microservices:
          type: array
          items: 
            $ref: '#/components/schemas/Microservice'
      required: 
        - label
        - microservices
    ContextAttribute:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        containerId:
          type: string
          example: a7dc1bb4485c5d1d94bc4bcb7001c6a4179e049ed84845f9253ae2e01e0d7e6e
        name:
          type: string
          example: chaac_client
        productionDisk:
          type: integer
          format: int64
          example: 25
        consumptionDisk:
          type: integer
          format: int64
          example: 25
        productionNet:
          type: integer
          format: int64
          example: 50
        consumptionNet:
          type: integer
          format: int64
          example: 50
        ufCPU:
          type: number
          format: double
          example: 0.7894
        ufMemory:
          type: number
          format: double
          example: 0.6730
        ufFileSystem:
          type: number
          format: double
          example: 0.1243
        ufNet:
          type: number
          format: double
          example: 0.2503
        timestamp:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - containerId
        - name
        - productionDisk
        - consumptionDisk
        - productionNet
        - consumptionNet
        - ufCPU
        - ufMemory
        - ufFileSystem
        - ufNet
        - timestamp
    Host:
      type: object
      properties:
        id:
          type: string
          example: host01
        url:
          type: string
          example: 127.0.0.1
        cores:
         type: integer
         format: int64
         example: 12
        memory:
          type: integer
          format: int64
          example: 8000000000
      required: 
        - id
        - url
        - cores
        - memory
    Port:
      type: object
      properties:
        expose:
          type: string
          example: 80
        port:
          type: string
          example: 8080
    Volume:
      type: object
      properties:
        volume:
          type: string
          example: /home/abarron/folder
        bind:
          type: string
          example: /app/folder
        mode:
         type: string
         example: rw
    Container:
      type: object
      properties:
        id:
          type: string
          example: 46bb6746aa
        image:
          type: string
          example: alfredobarron/datapool:1.2
        network:
          type: string
          example: my-net
        ports:
          type: array
          items: 
            $ref: '#/components/schemas/Port'
        env:
          additionalProperties:
            type: string
            example:
              NODE_LB: TC
        volume:
          type: array
          items: 
            $ref: '#/components/schemas/Volume'
      required:
        - id
        - image
        - network
    Cenote:
      type: object
      properties:
        id:
          type: string
          example: cenote1
        name:
          type: string
          example: cenote-1
        image:
          type: string
          example: alfredobarron/chaac-cenote:1
        network:
          type: string
          example: my-net
        publicPort:
          type: integer
          format: int32
          example: 8081
        distribuitor:
          type: string
          example: ROUND_ROBIN
          # RANDOM
          # SORT_UF
          # TWO_CHOICES
        container:
          readOnly: true
          oneOf:
            - $ref: '#/components/schemas/Container'
        status:
          type: boolean
          readOnly: true
          example: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - image
        - network
        - name
        - port
        - distribuitor
    Bin:
      type: object
      properties:
        id:
          type: string
          example: bin1
        name:
          type: string
          example: bin-1
        hostId:
          type: string
          example: host-1
        cenoteId:
          type: string
          example: cenote1
        image:
          type: string
          example: alfredobarron/chacc-bin:1
        network:
          type: string
          example: my-net
        cacheSize:
          type: integer
          format: int32
          example: 20
        cachePolicy:
          type: string
          example: LFU
        levels:
          type: integer
          format: int32
          example: 1
        memory:
          type: string
          example: 2GB
        capacity:
          type: string
          example: 40GB
        container:
          readOnly: true
          oneOf:
            - $ref: '#/components/schemas/Container'
        status:
          type: boolean
          readOnly: true
          example: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - name
        - hostId
        - cenoteId
        - image
        - network
        - type
        - input
        - output
        - cacheSize
        - cachePolicy
        - levels
        - memory
        - capacity
    Ball:
      type: object
      properties: 
        id: 
          type: string
          example: ball1
        name: 
          type: string
          example: ball
        hash:
          type: string
          example: 7a10ea1b9b2872da9f375002c44ddfce
        size: 
          type: integer
          format: int64
          example: 200000