openapi: 3.0.0
servers:
  - description: Middleware API
    url: http://localhost:8080/api/v1
info:
  description: This is API of component Middleware
  version: "1.0.0"
  title: Middleware API
  contact:
    email: alfredo.barron@cinvestav.mx
tags:
  - name: acquisition
    description: Acquisition of contextual attributes
  - name: analisys
    description: Data analisys 
  - name: creation
    description: Creation of data distribution scheme
  
paths:
  /hosts:
    post:
      tags:
        - acquisition
      summary: Add a new host
      operationId: createHost
      requestBody:
        description: 'Host object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostMicroservices'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
    get:
      tags: 
        - acquisition
      summary: Gets all hosts
      operationId: getAllHosts
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
  /attributes:
    post:
      tags:
        - acquisition
      summary: Add a new context attributes
      operationId: createContextAttribute
      requestBody:
        description: Host object that needs to be added
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ContextAttribute'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request

  /hosts/{id}:
    get:
      tags:
        - acquisition
      summary: Represents a host
      operationId: getHostById
      parameters:
        - name: id
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          description: Bad request
        '404':
          description: Not found
  /hosts/{id}/microservices:
    get:
      tags:
        - acquisition
      summary: Represents all microservice on host
      operationId: getMicroservicesByHost
      parameters:
        - name: id
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Microservice'
        '400':
          description: Bad request
  /hosts/{hostId}/microservices/{microserviceId}:
    get:
      tags:
        - acquisition
      summary: Represents a microservice on host
      parameters:
        - name: hostId
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
        - name: microserviceId
          in: path
          description: Microservice ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microservice'
        '400':
          description: Bad request
        '404':
          description: Not found
  /hosts/{hostId}/microservices/{microserviceId}/attributes:
    get:
      tags:
        - acquisition
      summary: Represents a microservice on host
      parameters:
        - name: hostId
          in: path
          description: Host ID
          required: true
          schema:
            type: string
            example: string
        - name: microserviceId
          in: path
          description: Microservice ID
          required: true
          schema:
            type: string
            example: string
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContextAttribute'
        '400':
          description: Bad request
        '404':
          description: Not found
  /ranking/{k}:
    get:
      tags:
        - analisys
      summary: Ranking of microservices
      parameters:
        - name: k
          in: path
          description: Number of zones
          required: true
          schema:
            type: integer
            format: int32
            example: 3
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '400':
          description: Bad request
  /pools:
    post:
      tags:
        - creation
      summary: Add a new pool
      operationId: createPool
      requestBody:
        description: 'Pool object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pool'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
    get:
      tags: 
        - creation
      summary: Gets all pools
      operationId: getAllPools
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        '400':
          description: Bad request
  /pools/{id}:
    get:
      tags:
        - creation
      summary: Represents a pool
      operationId: getPoolById
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '400':
          description: Bad request
    delete:
      tags:
        - creation
      summary: Delete a pool
      operationId: deletePoolById
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '404': 
          description: Not found
        '400':
          description: Bad request
  /pools/{id}/create:
    get:
      tags:
        - creation
      summary: Create one Data Pool
      operationId: createPoolbyId
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create pool
        '400':
          description: Bad request
  /pools/{id}/start:
    get:
      tags:
        - creation
      summary: Start one Data Pool
      operationId: startPoolbyId
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Start pool
        '400':
          description: Bad request
  /pools/{id}/restart:
    get:
      tags:
        - creation
      summary: Restart one Data Pool
      operationId: restartPoolbyId
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restart pool
        '400':
          description: Bad request
  /pools/{id}/stop:
    get:
      tags:
        - creation
      summary: Stop one Data Pool
      operationId: stopPoolbyId
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stop pool
        '400':
          description: Bad request
  /pools/{id}/remove:
    get:
      tags:
        - creation
      summary: Remove one Data Pool
      operationId: removePoolbyId
      parameters:
        - name: id
          in: path
          description: DataPool ID
          required: true
          schema:
            type: string
            example: pool-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Remove pool
        '400':
          description: Bad request
  /bins:
    post:
      tags:
        - creation
      summary: Add a new bin
      operationId: createBin
      requestBody:
        description: 'Bin object that needs to be added'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bin'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
    get:
      tags: 
        - creation
      summary: Gets all bins
      operationId: getAllBins
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bin'
        '400':
          description: Bad request
  /bins/{id}:
    get:
      tags:
        - creation
      summary: Represents a bin
      operationId: getBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'
        '400':
          description: Bad request
    delete:
      tags:
        - creation
      summary: Delete a bin
      operationId: deleteBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '404': 
          description: Not found
        '400':
          description: Bad request
  /bins/{id}/create:
    get:
      tags:
        - creation
      summary: Create one Bin
      operationId: createBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create bin
        '400':
          description: Bad request
  /bins/{id}/start:
    get:
      tags:
        - creation
      summary: Start one Bin
      operationId: startBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Start container
        '400':
          description: Bad request
  /bins/{id}/restart:
    get:
      tags:
        - creation
      summary: Restart one Bin
      operationId: restartBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Restart bin
        '400':
          description: Bad request
  /bins/{id}/stop:
    get:
      tags:
        - creation
      summary: Stop one Bin
      operationId: stopBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Stop container
        '400':
          description: Bad request
  /bins/{id}/remove:
    get:
      tags:
        - creation
      summary: Remove one Bin
      operationId: removeBinById
      parameters:
        - name: id
          in: path
          description: Bin ID
          required: true
          schema:
            type: string
            example: cache-0
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Remove bin
        '400':
          description: Bad request
components:
  schemas:
    Microservice:
      type: object
      properties:
        id:
          type: string
          example: a7dc1bb4485c5d1d94bc4bcb7001c6a4179e049ed84845f9253ae2e01e0d7e6e
        name: 
          type: string
          example: chaac_client
        hostId:
          type: string
          example: host01
        location:
          type: string
          example: 127.0.0.1
        volumeProductionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.9843
        densityProductionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.4504
        volumeConsumptionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.5302
        densityConsumptionNet:
          type: integer
          format: int64
          readOnly: true
          example: 0.8723
        volumeProductionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.1304
        densityProductionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.1345
        volumeConsumptionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.5694
        densityConsumptionDisk:
          type: integer
          format: int64
          readOnly: true
          example: 0.8791
      required:
      - id
      - name
      - hostId
      - location
    HostMicroservices:
      type: object
      properties:
        host:
          $ref: '#/components/schemas/Host'
        microservices:
          type: array
          items: 
            $ref: '#/components/schemas/Microservice'
      required: 
        - host
    Zone:
      type: object
      properties:
        label:
          type: string
          example: zone1
        microservices:
          type: array
          items: 
            $ref: '#/components/schemas/Microservice'
      required: 
        - label
        - microservices
    ContextAttribute:
      type: object
      properties:
        guid:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        containerId:
          type: string
          example: a7dc1bb4485c5d1d94bc4bcb7001c6a4179e049ed84845f9253ae2e01e0d7e6e
        name:
          type: string
          example: chaac_client
        productionDisk:
          type: integer
          format: int64
          example: 25
        consumptionDisk:
          type: integer
          format: int64
          example: 25
        productionNet:
          type: integer
          format: int64
          example: 50
        consumptionNet:
          type: integer
          format: int64
          example: 50
        ufCPU:
          type: number
          format: double
          example: 0.7894
        ufMemory:
          type: number
          format: double
          example: 0.6730
        ufFileSystem:
          type: number
          format: double
          example: 0.1243
        ufNet:
          type: number
          format: double
          example: 0.2503
        timestamp:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - containerId
        - name
        - productionDisk
        - consumptionDisk
        - productionNet
        - consumptionNet
        - ufCPU
        - ufMemory
        - ufFileSystem
        - ufNet
        - timestamp
    Host:
      type: object
      properties:
        id:
          type: string
          example: host01
        url:
          type: string
          example: 127.0.0.1
        cores:
         type: integer
         format: int64
         example: 12
        memory:
          type: integer
          format: int64
          example: 8000000000
      required: 
        - id
        - url
        - cores
        - memory
    Port:
      type: object
      properties:
        expose:
          type: string
          example: 80
        port:
          type: string
          example: 8080
    Volume:
      type: object
      properties:
        volume:
          type: string
          example: /home/abarron/folder
        bind:
          type: string
          example: /app/folder
        mode:
         type: string
         example: rw
    Container:
      type: object
      properties:
        id:
          type: string
          example: 46bb6746aa
        image:
          type: string
          example: alfredobarron/datapool:1.2
        network:
          type: string
          example: my-net
        ports:
          type: array
          items: 
            $ref: '#/components/schemas/Port'
        env:
          additionalProperties:
            type: string
            example:
              NODE_LB: TC
        volume:
          type: array
          items: 
            $ref: '#/components/schemas/Volume'
      required:
        - id
        - image
        - network
    Pool:
      type: object
      properties:
        id:
          type: string
          example: pcd1
        name:
          type: string
          example: pool-1
        image:
          type: string
          example: alfredobarron/data_pool:2.4
        network:
          type: string
          example: my-net
        publicPort:
          type: integer
          format: int32
          example: 8081
        distribuitor:
          type: string
          example: ROUND_ROBIN
          # RANDOM
          # SORT_UF
          # TWO_CHOICES
        container:
          readOnly: true
          oneOf:
            - $ref: '#/components/schemas/Container'
        status:
          type: boolean
          readOnly: true
          example: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - image
        - network
        - name
        - port
        - lb
    Bin:
      type: object
      properties:
        id:
          type: string
          example: cd1
        name:
          type: string
          example: bin1
        hostId:
          type: string
          example: host01
        poolId:
          type: string
          example: pool-0
        image:
          type: string
          example: alfredobarron/data_container:2
        network:
          type: string
          example: my-net
        cacheSize:
          type: integer
          format: int32
          example: 20
        cachePolicy:
          type: string
          example: LFU
        levels:
          type: integer
          format: int32
          example: 1
        memory:
          type: integer
          format: int32
          example: 2GB
        capacity:
          type: integer
          format: int32
          example: 40GB
        container:
          readOnly: true
          oneOf:
            - $ref: '#/components/schemas/Container'
        status:
          type: boolean
          readOnly: true
          example: true
        created_at:
          type: string
          format: date-time
          readOnly: true
          example: '2016-08-29T09:12:33.001Z'
      required:
        - id
        - name
        - hostId
        - poolId
        - image
        - network
        - type
        - input
        - output
        - cacheSize
        - cachePolicy
        - levels
        - memory
        - capacity